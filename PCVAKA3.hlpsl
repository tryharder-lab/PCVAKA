role  role_U1_initiator(
  U1, ECV: agent,
  H,Mul: hash_func,
  Kue:symmetric_key,
  Cu1,Cu2, Pkecv2,PKecv3: public_key,
  SND, RCV: channel(dy)
)
played_by U1
def=
  local
    State: nat,
    SKj : text,
   T1, T2, VP1j,VP2j, VP1i ,VP2i,P1,P2,Theta,Rj: message
init
    State := 0
 transition
    1. State = 0 /\ RCV(start) =|>
      Rj' :=new() /\
      P1' :=new() /\
      T1' :=new() /\  %20
     %VP1j' := /\
     %SND({U1.ECV.VP1j'}_Kue) /\
      SND(U1.ECV.{U1.ECV.Mul(P1'.H(Rj'.T1'.U1.ECV))}_Kue)/\

     State' :=2 
2.  State =2 /\RCV({U1.ECV.Mul(P2'.H(Theta'.T2'.U1.ECV)).Mul(P1.H(Rj.T1.U1.ECV))}_Kue) =|>
     witness(U1,ECV, sid1, {Mul(P1.H(Rj.T1.U1.ECV))})/\
SKj' :=new() /\
secret(SKj',sid1,{U1}) /\
SND({U1.ECV.Mul(P2'.H(Theta'.T2'.U1.ECV))}_Kue)/\
State' :=3/\
request(U1,ECV,sid1,{Mul(P2.H(Theta.T2.U1.ECV))}) %30
end role


 role  role_ECV_initiator(
  U1, ECV: agent,
  H,Mul: hash_func,
  Kue:symmetric_key,
  PKecv2,PKecv3,Cu1,Cu2: public_key ,
  SND, RCV: channel(dy)
)

played_by ECV
def=   %40
  local
    State: nat,
     SKi: text,
    T1, T2, VP1i, VP2i,VP1j ,VP2j,Rj,Theta,P1,P2: message

 init
    State := 1
  transition

1. State = 1 /\ RCV({U1.ECV.{Mul(P1'.H(Rj'.T1'.U1.ECV))}_Kue}_Kue) =|>
       request (ECV,U1,sid1,{Mul(P1'.H(Rj'.T1'.U1.ECV))})/\
       Theta' := new() /\
       P2' :=new()/\ %50
       T2' :=new()/\
       %VP1i' := {U1.ECV.Mul(P2'.H(Theta'.T2'.U1.ECV))}_Kue /\

       SND({U1.ECV.Mul(P2'.H(Theta'.T2'.U1.ECV)).Mul(P1'.H(Rj'.T1'.U1.ECV))}_Kue) /\
       State' := 2 

2.State =2 /\ RCV({U1.ECV.Mul(P2.H(Theta.T2.U1.ECV))}_Kue) =|>
SKi' :=new() /\
secret (SKi',sid1, {ECV}) /\
witness(ECV,U1,sid1,{Mul(P2.H(Theta.T2.U1.ECV))})/\
State' :=3%/\
%request (ECV,U1,sid1,{Mul(P1'.H(Rj'.T1'.U1.ECV))}) %60
end role

role session(
  U1, ECV: agent,
  H,Mul: hash_func,
  Kue:symmetric_key,
  PKecv2, PKecv3, Cu1,Cu2: public_key
)
def=
  local SU, RU, SE, RE: channel(dy)
  composition
   role_U1_initiator(U1, ECV, H, Mul,Kue,Cu1,Cu2,PKecv2, PKecv3,SU, RU)
    /\ role_ECV_initiator(U1, ECV, H, Mul,Kue,PKecv2, PKecv3,Cu1, Cu2,SE, RE)
 
end role

role environment()
def=
  const
    u1, ecv: agent,
    h,mul: hash_func,
    sid1 : protocol_id,
    kue:symmetric_key,
    pkecv2,pkecv3, cu1,cu2: public_key
  intruder_knowledge = {u1, ecv, pkecv2,pkecv3, cu1,cu2,h,mul}

  composition
    session(u1, ecv, h, mul,kue, pkecv2, pkecv3,cu1,cu2)/\ session(u1, ecv, h,  mul,kue,pkecv2, pkecv3,cu1,cu2)
end role

goal
  
secrecy_of sid1    
authentication_on sid1



end goal

environment()
