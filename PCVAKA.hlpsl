role  role_U1_initiator(
  U1, ECV: agent,
  H,Mul: hash_func,
  Kue:symmetric_key,
  Cu1,Cu2, Pkecv2,PKecv3: public_key,
  SND, RCV: channel(dy)
)
played_by U1
def=
  local
    State: nat,
    RIDuj, SKj : text,
    Aj ,PIDj ,T2, T3, VP1j,VP2j, VP1i ,VP2i,Rj,P1,P2,Theta: message

init
    State := 0
 transition
    1. State = 0 /\ RCV(start) =|>
       RIDuj' := new() /\
       Aj' := {xor(RIDuj', {H(Pkecv2)}_inv(Cu1)) }_Kue/\
       SND({U1.ECV.Aj'}_Kue) /\   %20
       secret(RIDuj', sid1, {U1}) /\
       State' := 3

 2. State = 3 /\ RCV({U1.ECV.PIDj'.T2'}_Kue) =|>

      Rj' :=new() /\
      P1' :=new()/\
     SND(U1.ECV.{U1.ECV.Mul(P1'.H(Rj'.T2'.U1.ECV))}_Kue) /\
     State' := 5 

3.  State =5 /\ RCV({U1.ECV.Mul(P2'.H(Theta'.T3'.U1.ECV)).Mul(P1.H(Rj.T2.U1.ECV))}_Kue) =|> 
witness(U1, ECV,  sid1, {Mul(P1.H(Rj.T2.U1.ECV))})/\
SKj' :=new() /\  %30
secret(SKj',sid1,{U1}) /\
     SND({U1.ECV.Mul(P2'.H(Theta'.T3'.U1.ECV))}_Kue)/\
State' :=6/\
request(U1,ECV,sid1,{Mul(P2'.H(Theta'.T3'.U1.ECV))})
end role

 role  role_ECV_initiator(
  U1, ECV: agent,
  H,Mul: hash_func,   %40
  Kue:symmetric_key,
  PKecv2,PKecv3,Cu1,Cu2: public_key ,
  SND, RCV: channel(dy)
)

played_by ECV
def=
  local
    State: nat,
    SKi: text,
    PIDj, Aj, T2, T3, VP1i, VP2i,VP1j ,VP2j,Rj,Theta, P1,P2: message   %50

  init
    State := 1
  transition

1. State = 1 /\ RCV({U1.ECV.Aj'}_Kue) =|>
       Theta' := new() /\
       PIDj' := xor(Aj', {H(Cu1.Theta')}_inv(PKecv2)) /\
       T2' := new() /\
       SND({U1.ECV.{U1.ECV.PIDj'}_Kue.T2'}_Kue) /\
       secret(Theta', sid1, {ECV}) /\
       State' := 3 %60

2.State =3 /\ RCV({U1.ECV.{Mul(P1'.H(Rj'.T2'.U1.ECV))}_Kue}_Kue)=|>
T3' :=new()/\
P2' :=new() /\
Theta' :=new()/\
SND({U1.ECV.Mul(P2'.H(Theta'.T3'.U1.ECV)).Mul(P1'.H(Rj'.T2'.U1.ECV))}_Kue) /\
State' :=7

3. State =7/\ RCV({U1.ECV.Mul(P2.H(Theta.T3.U1.ECV))}_Kue) =|>
SKi' :=new() /\
secret (SKi',sid1, {ECV}) /\
witness(ECV,U1,sid1,{Mul(P2.H(Theta.T3.U1.ECV))})/\  %70
State' :=8
end role

 role session(
  U1, ECV: agent,
  H,Mul: hash_func,
  Kue:symmetric_key,
  PKecv2, PKecv3, Cu1,Cu2: public_key
)
def=
  local SU, RU, SE, RE: channel(dy)
  composition
   role_U1_initiator(U1, ECV, H, Mul,Kue,Cu1,Cu2,PKecv2, PKecv3,SU, RU)
    /\ role_ECV_initiator(U1, ECV, H, Mul,Kue,PKecv2, PKecv3,Cu1, Cu2,SE, RE)
 
end role

role environment()
def=
  const
    u1, ecv: agent,
    h,mul: hash_func,
    sid1 : protocol_id,
    kue:symmetric_key,
    pkecv2,pkecv3, cu1,cu2: public_key
  intruder_knowledge = {u1, ecv, pkecv2,pkecv3, cu1,cu2,h}

  composition
    session(u1, ecv, h, mul,kue, pkecv2, pkecv3,cu1,cu2)/\ session(u1, ecv, h,  mul,kue,pkecv2, pkecv3,cu1,cu2)
end role

goal
  
secrecy_of sid1    
authentication_on sid1



end goal

environment()
